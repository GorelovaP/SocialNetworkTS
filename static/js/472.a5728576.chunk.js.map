{"version":3,"file":"static/js/472.a5728576.chunk.js","mappings":"wKACA,G,QAAyB,4BAAzB,EAA6D,2B,mBCKhDA,EAAa,SAACC,GACvB,OACI,0BACI,SAAC,KAAD,CAASC,UAAWC,EAAW,IAAMA,EAAUC,GAAE,mBAAcH,EAAMI,IAArE,SAA4EJ,EAAMK,QAG7F,ECXD,EAA0B,yBAA1B,EAAmE,+BAAnE,EAA6G,0BCA7G,EAA0B,yBCKbC,EAAU,SAACN,GAEpB,OACI,0BACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMO,QAG7C,E,8BCHKC,GAAeC,EAAAA,EAAAA,IAAiB,KAEzBC,EAAyD,SAACV,GACnE,OACI,iBAAMW,SAAUX,EAAMY,aAAtB,UACI,4BACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXV,KAAK,iBACLW,SAAU,CAACC,EAAAA,GAAUT,GACrBU,YAAa,0BAExB,yCAKf,E,mECGD,GAPyBC,E,QAAAA,KACrBC,EAAAA,EAAAA,KAVkB,SAACC,GACnB,MAAO,CACHC,QAASD,EAAME,YAAYD,QAC3BE,SAAUH,EAAME,YAAYC,SAC5BC,OAAQJ,EAAMK,KAAKD,OAE1B,GAI4B,CACrBE,YAAaC,EAAAA,KCpBd,SAA6BC,GAwBhC,OAAOT,EAAAA,EAAAA,KAdiB,SAACC,GACrB,MAAO,CACHI,OAAQJ,EAAMK,KAAKD,OAG1B,GASML,EARmB,SAACpB,GACvB,IAAKyB,EAAwBzB,EAAxByB,OAAWK,GAAhB,OAA6B9B,EAA7B,GAGA,OAAKyB,GACE,SAACI,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU3B,GAAI,UAErC,GAGJ,GDPwBgB,EEdF,SAACnB,GAEpB,IAAM+B,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,CAAwDtB,GAGhFwB,EAAkBlC,EAAMsB,QAAQa,KAAI,SAAAC,GAAC,OAAI,SAACrC,EAAD,CAAuBM,KAAM+B,EAAE/B,KAAMD,GAAIgC,EAAEhC,IAA1BgC,EAAEhC,GAAvB,IACrCiC,EAAmBrC,EAAMwB,SAASW,KAAI,SAAAG,GAAC,OAAI,SAAChC,EAAD,CAAoBC,KAAM+B,EAAE/B,MAAd+B,EAAElC,GAApB,IAM3C,OAAQ,iBAAKH,UAAWC,EAAhB,WACJ,gBAAKD,UAAWC,EAAhB,SACKgC,KAEL,gBAAKjC,UAAWC,EAAhB,SACKmC,KAEL,SAACN,EAAD,CAAqBpB,SAXQ,SAAC4B,GAC9BvC,EAAM2B,YAAYY,EAASC,eAC9B,MAWJ,G","sources":["webpack://putsamyrai/./src/Components/Dialogs/Dialog/DialogItem.module.css?54cf","Components/Dialogs/Dialog/DialogItem.tsx","webpack://putsamyrai/./src/Components/Dialogs/Dialogs.module.css?db5c","webpack://putsamyrai/./src/Components/Dialogs/Message/Message.module.css?687c","Components/Dialogs/Message/Message.tsx","Components/Dialogs/dialogsForm/DialogsForm.tsx","Components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__IEn3e\",\"active\":\"DialogItem_active__aDThl\"};","import s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {dialogType} from \"../../../Redux/dialogsPage-reducer\";\r\n\r\n\r\nexport const DialogItem = (props: dialogType) => {\r\n    return (\r\n        <div>\r\n            <NavLink className={s.dialog + ' ' + s.active} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n\r\n        </div>);\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dqNSV\",\"dialogs_items\":\"Dialogs_dialogs_items__shtve\",\"massages\":\"Dialogs_massages__hqCAr\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__WYDgE\"};","import s from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\n type MessageType = {\r\n    text: string;\r\n}\r\nexport const Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.message}>{props.text}</div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\n\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength150 = maxLengthCreator(150)\r\n\r\nexport const DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field component={Textarea}\r\n                           name=\"newMessageBody\"\r\n                           validate={[required, maxLength150]}\r\n                           placeholder={\"Enter your message\"}/>\r\n                </div>\r\n                <button>Send</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}","import {SendMessageAC, dialogPageType} from \"../../Redux/dialogsPage-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {reduxStateType} from \"../../Redux/redax-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype mapStateToPropsType = dialogPageType & { isAuth: boolean }\r\ntype mapDispatchPropsType = {\r\n    SendMessage: (newMessageBody: string) => void,\r\n    onChangeNewMessage: (newMassageText: string) => void\r\n}\r\nlet mapStateToProps = (state: reduxStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        SendMessage: SendMessageAC\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\nexport type DialogPagePropsType = mapStateToPropsType & mapDispatchPropsType","import React, {ComponentType} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {reduxStateType} from \"../Redux/redax-store\";\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    //T - пропсы, которые придут нам с компонентой\r\n    // ComponentType - джинериковая типизация , работает только в function declaration, но не в стрелочных функциях!!!\r\n\r\n\r\n    type mapStateToPropsTYpe = {\r\n        isAuth: boolean\r\n    }\r\n\r\n    const mapStateToProps = (state: reduxStateType): mapStateToPropsTYpe => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n\r\n    }\r\n    const RedirectComponent = (props: mapStateToPropsTYpe) => {\r\n        let {isAuth, ...restProps} = props // деструктуризация пропсов, чтобы не прокидывать дальше isAUth(изолировать)\r\n\r\n\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react';\r\nimport {DialogItem} from './Dialog/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {DialogPagePropsType} from \"./DialogsContainer\";\r\nimport {DialogsForm, FormDataType} from \"./dialogsForm/DialogsForm\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\n\r\nexport const Dialogs = (props: DialogPagePropsType) => {\r\n\r\n    const AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(DialogsForm)\r\n\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <Message key={m.id} text={m.text}/>)\r\n\r\n    const onSubmitDialogFormSubmit = (formData: FormDataType) => {\r\n        props.SendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (<div className={s.dialogs}>\r\n        <div className={s.dialogs_items}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.massages}>\r\n            {messagesElements}\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={onSubmitDialogFormSubmit}/>\r\n    </div>)\r\n}"],"names":["DialogItem","props","className","s","to","id","name","Message","text","maxLength150","maxLengthCreator","DialogsForm","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","dialogs","dialogsPage","messages","isAuth","auth","SendMessage","SendMessageAC","Component","restProps","AddMessageFormRedux","reduxForm","form","dialogsElements","map","d","messagesElements","m","formData","newMessageBody"],"sourceRoot":""}