{"version":3,"file":"static/js/574.4f5448dd.chunk.js","mappings":"mPACA,EAA8B,+BAA9B,EAAqE,yBAArE,EAA0G,6BAA1G,EAAkJ,4B,mBCuBrIA,EAAY,SAACC,GAEtB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,CAAC,EAWjC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOJ,MAEDI,EAAOH,SAASM,QAAU,IACjCF,EAAOJ,SAAW,kCAFlBI,EAAOJ,SAAW,WAIfI,CACV,EACDG,SAAU,SAAAJ,GACNR,EAAMa,SAASL,EAElB,IAGL,OAAQ,0BACJ,kBAAMM,KAAK,QAAQF,SAAUX,EAAOc,aAApC,WACI,4BACI,kBAAOC,UAAWC,EAAlB,oBACA,0BAAOC,KAAK,OACLC,YAAa,0BACbH,UAAWC,GACPhB,EAAOmB,cAAc,WAE/BnB,EAAOoB,QAAQjB,OAASH,EAAOQ,OAAOL,QACvC,gBAAKY,UAAWM,EAAAA,EAAAA,UAAhB,SAA8BrB,EAAOQ,OAAOL,YAEhD,4BACI,kBAAOY,UAAWC,EAAlB,uBACA,0BACIC,KAAK,WACLF,UAAWC,EACXE,YAAa,8BACTlB,EAAOmB,cAAc,cAE5BnB,EAAOoB,QAAQhB,UAAYJ,EAAOQ,OAAOJ,WAC1C,gBAAKW,UAAWM,EAAAA,EAAAA,UAAhB,SAA8BrB,EAAOQ,OAAOJ,eAEhD,0BACI,6CACI,kCAAOa,KAAM,YACFjB,EAAOmB,cAAc,eADhC,IAEOJ,UAAWC,EACXM,QAAStB,EAAOO,OAAOF,mBAGrCN,EAAMwB,UAAW,gBAAKR,UAAWM,EAAAA,EAAAA,YAAhB,UACd,gBAAKG,IAAKzB,EAAMwB,QAASE,IAAK,cAEjC1B,EAAMwB,UAAW,iCACd,kBAAOR,UAAWC,EAAlB,2BACA,0BACIC,KAAK,OACLF,UAAWC,EACXE,YAAa,oBACbQ,UAAU,GACN1B,EAAOmB,cAAc,iBAGjC,0BACI,mBAAQJ,UAAWC,EAAiBC,KAAM,SAA1C,qBAEHlB,EAAM4B,QAAQjB,OAAS,IAAK,iBAAKK,UAAWM,EAAAA,EAAAA,cAAhB,cAAmCtB,EAAM4B,eAIjF,E,UCtGD,EAAmC,gCAAnC,EAA8E,wBAA9E,EAAuH,8B,UCmB1GC,GAAiBC,EAAAA,EAAAA,KAdN,SAACC,GACrB,MAAO,CACHC,KAAMD,EAAME,KAAKD,KACjBE,OAAQH,EAAME,KAAKC,OACnBC,aAAcJ,EAAME,KAAKE,aACzBX,QAASO,EAAME,KAAKT,QAE3B,GAOsD,CACnDY,MAAOC,EAAAA,GACPC,OAAQC,EAAAA,IAFkBT,ECbL,SAAC9B,GAOtB,OAAIA,EAAMkC,QACC,SAAC,KAAD,CAAUM,GAAIC,EAAAA,EAAAA,QAAA,WAAmBzC,EAAMgC,KAAKU,WAInD,iBAAK1B,UAAWM,EAAhB,WACI,iBAAKN,UAAWM,EAAhB,WACI,mCACA,SAACvB,EAAD,CAAWc,SAZH,SAAC8B,GACjB3C,EAAMoC,MAAMO,EAASvC,MAAOuC,EAAStC,SAAUsC,EAASrC,WAAYqC,EAASnB,QAChF,EAU6CI,QAAS5B,EAAMmC,aAAcX,QAASxB,EAAMwB,cAElF,gBAAKR,UAAWM,EAAhB,UACI,2FAKf,IDLD,G","sources":["webpack://putsamyrai/./src/components/login/form/LoginForm.module.css?6719","components/login/form/LoginForm.tsx","webpack://putsamyrai/./src/components/login/Login.module.css?3966","components/login/LoginContainer.tsx","components/login/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"styledInput\":\"LoginForm_styledInput__DhRP5\",\"label\":\"LoginForm_label__pg2kF\",\"submitBtn\":\"LoginForm_submitBtn__r8U63\",\"checkBox\":\"LoginForm_checkBox__J-hdb\"};","import React from \"react\";\r\nimport s from \"../../common/formsControls/FormControls.module.css\"\r\nimport style from \"./LoginForm.module.css\"\r\nimport {useFormik} from \"formik\";\r\n\r\n// InjectedFormProps пропс, которые приходят из контейнерной компоненты\r\n\r\ntype LoginFormPropsType = {\r\n    sendData: (data: dataType) => void\r\n    message: string\r\n    captcha: string\r\n}\r\nexport type dataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport const LoginForm = (props: LoginFormPropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.email) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = \"Need to be more then 3 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.sendData(values)\r\n            // formik.resetForm();\r\n        }\r\n    })\r\n\r\n    return (<div>\r\n        <form name=\"login\" onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <label className={style.label}>Email</label>\r\n                <input type=\"text\"\r\n                       placeholder={\"type here your email...\"}\r\n                       className={style.styledInput}\r\n                       {...formik.getFieldProps(\"email\")}\r\n                />\r\n                {formik.touched.email && formik.errors.email &&\r\n                <div className={s.formError}>{formik.errors.email}</div>}\r\n            </div>\r\n            <div>\r\n                <label className={style.label}>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    className={style.styledInput}\r\n                    placeholder={\"type here your password...\"}\r\n                    {...formik.getFieldProps(\"password\")}\r\n                />\r\n                {formik.touched.password && formik.errors.password &&\r\n                <div className={s.formError}>{formik.errors.password}</div>}\r\n            </div>\r\n            <div>\r\n                <label> Remember me\r\n                    <input type={\"checkbox\"}\r\n                           {...formik.getFieldProps(\"rememberMe\")}\r\n                           className={style.checkBox}\r\n                           checked={formik.values.rememberMe}/>\r\n                </label>\r\n            </div>\r\n            {props.captcha && <div className={s.captchaArea}>\r\n                <img src={props.captcha} alt={\"captcha\"}/>\r\n            </div>}\r\n            {props.captcha && <>\r\n                <label className={style.label}>Сaptcha</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className={style.styledInput}\r\n                    placeholder={\"type here captcha\"}\r\n                    required={true}\r\n                    {...formik.getFieldProps(\"captcha\")}\r\n                />\r\n            </>}\r\n            <div>\r\n                <button className={style.submitBtn} type={\"submit\"}>Login</button>\r\n            </div>\r\n            {props.message.length > 0 && <div className={s.formMainError}> {props.message}</div>}\r\n\r\n        </form>\r\n    </div>)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"loginMAinWrapper\":\"Login_loginMAinWrapper__vuDGL\",\"testData\":\"Login_testData__vwMyh\",\"loginContainer\":\"Login_loginContainer__f8mFG\"};","import {connect} from \"react-redux\";\r\nimport {reduxStateType} from \"../../redux/redax-store\";\r\nimport {authInitialType, loginTC, logoutTC} from \"../../redux/auth-reduсer\";\r\nimport {LoginPage} from \"./LoginPage\";\r\n\r\n\r\nconst mapStateToProps = (state: reduxStateType): authInitialType => {\r\n    return {\r\n        data: state.auth.data,\r\n        isAuth: state.auth.isAuth,\r\n        errorMassage: state.auth.errorMassage,\r\n        captcha: state.auth.captcha\r\n    }\r\n}\r\n\r\ntype  mapDispatchToPropsType = {\r\n    logIn: (email: string, password: string, rememberMe: boolean, captcha?: string) => void\r\n    logOut: () => void;\r\n}\r\n\r\nexport const LoginContainer = connect(mapStateToProps, {\r\n    logIn: loginTC,\r\n    logOut: logoutTC\r\n})(LoginPage)\r\n\r\nexport default LoginContainer\r\nexport type UsersPagePropsType = authInitialType & mapDispatchToPropsType","import {dataType, LoginForm} from \"./form/LoginForm\";\r\nimport {UsersPagePropsType} from \"./LoginContainer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport s from \"./Login.module.css\"\r\nimport {PATH} from \"../../routes/PagesRouters\";\r\n\r\n\r\nexport const LoginPage = (props: UsersPagePropsType) => {\r\n\r\n\r\n    const constSubmit = (formData: dataType) => {\r\n        props.logIn(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to={PATH.PROFILE + `/${props.data.userId}`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginMAinWrapper}>\r\n            <div className={s.loginContainer}>\r\n                <h1>login</h1>\r\n                <LoginForm sendData={constSubmit} message={props.errorMassage} captcha={props.captcha}/>\r\n            </div>\r\n            <div className={s.testData}>\r\n                <p>Test account data: Email: free@samuraijs.com Password: free</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}"],"names":["LoginForm","props","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","sendData","name","handleSubmit","className","style","type","placeholder","getFieldProps","touched","s","checked","captcha","src","alt","required","message","LoginContainer","connect","state","data","auth","isAuth","errorMassage","logIn","loginTC","logOut","logoutTC","to","PATH","userId","formData"],"sourceRoot":""}