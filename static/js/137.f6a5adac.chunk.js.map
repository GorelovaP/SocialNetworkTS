{"version":3,"file":"static/js/137.f6a5adac.chunk.js","mappings":"wKACA,G,QAAyB,4BAAzB,EAA6D,2B,6BCKhDA,EAAa,SAACC,GACvB,IAAOC,GAAUC,EAAAA,EAAAA,MAAVD,OAEP,OACI,+BACI,SAAC,KAAD,CAASE,UAAS,UAAKC,EAAL,aAAkBH,IAAYD,EAAMK,IAAMD,GACnDE,GAAE,mBAAcN,EAAMK,IAD/B,SACsCL,EAAMO,QAEvD,ECbD,EAA0B,yBAA1B,EAAmE,+BAAnE,EAAiH,8BAAjH,EAA0J,0BAA1J,EAA+L,0BCA/L,EAA0B,yBAA1B,EAA+D,2BCMlDC,EAAU,SAACR,GAEpB,OACI,gBAAKG,UAAWH,EAAMS,GAAKL,EAAcA,EAAzC,SAAqDJ,EAAMU,MAElE,E,8BCXD,EAA8B,iCAA9B,EAA2E,+BAA3E,EAAkH,2BAAlH,EAAyJ,+BCUnJC,GAAeC,EAAAA,EAAAA,IAAiB,KAChCC,GAAaC,EAAAA,EAAAA,IAAiB,GAEvBC,EAAyD,SAACf,GACnE,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAcd,UAAWC,EAA/C,WAEI,gBAAKD,UAAWC,EAAhB,UACI,SAACc,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXb,KAAK,iBACLc,SAAU,CAACR,EAAYF,GACvBR,UAAWC,EACXkB,YAAa,0BAExB,mBAAQnB,UAAWC,EAAnB,oBAGX,E,yDCCD,GAPyBmB,E,QAAAA,KACrBC,EAAAA,EAAAA,KATkB,SAACC,GACnB,MAAO,CACHC,QAASD,EAAME,YAAYD,QAC3BE,OAAQH,EAAMI,KAAKD,OAE1B,GAI4B,CACrBE,YAAaC,EAAAA,KCnBd,SAA6BC,GAwBhC,OAAOR,EAAAA,EAAAA,KAdiB,SAACC,GACrB,MAAO,CACHG,OAAQH,EAAMI,KAAKD,OAG1B,GASMJ,EARmB,SAACxB,GACvB,IAAK4B,EAAwB5B,EAAxB4B,OAAWK,GAAhB,OAA6BjC,EAA7B,GAGA,OAAK4B,GACE,SAACI,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU3B,GAAI,UAErC,GAGJ,GDRwBiB,EEZF,SAACvB,GAEpB,IAQIkC,EARGjC,GAAUC,EAAAA,EAAAA,MAAVD,OAEDkC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,CAAwDrB,GAG9EuB,EAAkBtC,EAAM0B,QAAQa,KAAI,SAAAC,GAAC,OAAI,SAACzC,EAAD,CAAuBQ,KAAMiC,EAAEjC,KAAMF,GAAImC,EAAEnC,GAC/BoC,SAAUD,EAAEC,UADPD,EAAEnC,GAAvB,IAErCqC,EAAW1C,EAAM0B,QAAQiB,MAAK,SAAAH,GAAC,OAAIA,EAAEnC,MAAQJ,CAAd,IAEjCyC,IACAR,EAAmBQ,EAASD,SAASF,KAAI,SAAAK,GAAC,OAAI,SAACpC,EAAD,CAAoBE,KAAMkC,EAAElC,KAAMD,GAAImC,EAAEnC,IAA1BmC,EAAEvC,GAApB,KAY9C,OAAQ,iBAAKF,UAAWC,EAAhB,WACJ,gBAAKD,UAAWC,EAAhB,SACKkC,IAEJrC,GACG,iBAAKE,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,SAACC,EAAD,CAAqBnB,SAjBA,SAAC6B,GAC1B5C,GACAD,EAAM8B,YAAY7B,EAAQ4C,EAASC,eAG1C,QAcO,gBAAK3C,UAAWC,EAAhB,+BAMX,G","sources":["webpack://putsamyrai/./src/components/dialogs/Dialog/DialogItem.module.css?99b7","components/dialogs/Dialog/DialogItem.tsx","webpack://putsamyrai/./src/components/dialogs/Dialogs.module.css?04a9","webpack://putsamyrai/./src/components/dialogs/Message/Message.module.css?2c3e","components/dialogs/Message/Message.tsx","webpack://putsamyrai/./src/components/dialogs/dialogsForm/dialogsForm.module.css?e12d","components/dialogs/dialogsForm/DialogsForm.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__Hf+1j\",\"active\":\"DialogItem_active__uVkgX\"};","import s from \"./DialogItem.module.css\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {dialogType} from \"../../../redux/dialogsPage-reducer\";\r\n\r\n\r\nexport const DialogItem = (props: dialogType) => {\r\n    const {userId} = useParams()\r\n\r\n    return (\r\n        <>\r\n            <NavLink className={`${s.dialog} ${+userId! === props.id && s.active}`}\r\n                     to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </>);\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Yn3g5\",\"dialogs_items\":\"Dialogs_dialogs_items__W1Q92\",\"massagesArea\":\"Dialogs_massagesArea__10vUL\",\"hintArea\":\"Dialogs_hintArea__4-1l3\",\"massages\":\"Dialogs_massages__+IoMN\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__+85AH\",\"messageMy\":\"Message_messageMy__tN6qZ\"};","import s from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageType = {\r\n    text: string\r\n    my?: boolean\r\n}\r\nexport const Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div className={props.my ? s.messageMy : s.message}>{props.text}</div>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsForm\":\"dialogsForm_dialogsForm__5lCTb\",\"fieldArea\":\"dialogsForm_fieldArea__3td+M\",\"field\":\"dialogsForm_field__D0KLv\",\"submitBtn\":\"dialogsForm_submitBtn__3z-PJ\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\nimport {maxLengthCreator, minLengthCreator} from \"../../../utils/validators\";\r\nimport s from \"./dialogsForm.module.css\"\r\n\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength150 = maxLengthCreator(150)\r\nconst minLength1 = minLengthCreator(1)\r\n\r\nexport const DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.dialogsForm}>\r\n\r\n            <div className={s.fieldArea}>\r\n                <Field component={Textarea}\r\n                       name=\"newMessageBody\"\r\n                       validate={[minLength1, maxLength150]}\r\n                       className={s.field}\r\n                       placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <button className={s.submitBtn}>Send</button>\r\n        </form>\r\n    )\r\n}","import {SendMessageAC, dialogPageType} from \"../../redux/dialogsPage-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {reduxStateType} from \"../../redux/redax-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype mapStateToPropsType = dialogPageType & { isAuth: boolean }\r\ntype mapDispatchPropsType = {\r\n    SendMessage: (dialogId: string, newMessageBody: string) => void,\r\n    onChangeNewMessage: (newMassageText: string) => void\r\n}\r\nlet mapStateToProps = (state: reduxStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        SendMessage: SendMessageAC\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\nexport type DialogPagePropsType = mapStateToPropsType & mapDispatchPropsType","import React, {ComponentType} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {reduxStateType} from \"../redux/redax-store\";\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    //T - пропсы, которые придут нам с компонентой\r\n    // ComponentType - джинериковая типизация , работает только в function declaration, но не в стрелочных функциях!!!\r\n\r\n\r\n    type mapStateToPropsTYpe = {\r\n        isAuth: boolean\r\n    }\r\n\r\n    const mapStateToProps = (state: reduxStateType): mapStateToPropsTYpe => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n\r\n    }\r\n    const RedirectComponent = (props: mapStateToPropsTYpe) => {\r\n        let {isAuth, ...restProps} = props // деструктуризация пропсов, чтобы не прокидывать дальше isAUth(изолировать)\r\n\r\n\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react';\r\nimport {DialogItem} from './Dialog/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {DialogPagePropsType} from \"./DialogsContainer\";\r\nimport {DialogsForm, FormDataType} from \"./dialogsForm/DialogsForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nexport const Dialogs = (props: DialogPagePropsType) => {\r\n\r\n    const {userId} = useParams()\r\n\r\n    const AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(DialogsForm)\r\n\r\n\r\n    const dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}\r\n                                                               messages={d.messages}/>)\r\n    const chDialog = props.dialogs.find(d => d.id === +userId!)\r\n    let messagesElements\r\n    if (chDialog) {\r\n        messagesElements = chDialog.messages.map(m => <Message key={m.id} text={m.text} my={m.my}/>)\r\n    }\r\n\r\n\r\n    const onSubmitDialogFormSubmit = (formData: FormDataType) => {\r\n        if (userId) {\r\n            props.SendMessage(userId, formData.newMessageBody)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (<div className={s.dialogs}>\r\n        <div className={s.dialogs_items}>\r\n            {dialogsElements}\r\n        </div>\r\n        {userId ?\r\n            <div className={s.massagesArea}>\r\n                <div className={s.massages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={onSubmitDialogFormSubmit}/>\r\n            </div> :\r\n            <div className={s.hintArea}>\r\n                select a dialog\r\n            </div>\r\n        }\r\n\r\n    </div>)\r\n}"],"names":["DialogItem","props","userId","useParams","className","s","id","to","name","Message","my","text","maxLength150","maxLengthCreator","minLength1","minLengthCreator","DialogsForm","onSubmit","handleSubmit","Field","component","Textarea","validate","placeholder","compose","connect","state","dialogs","dialogsPage","isAuth","auth","SendMessage","SendMessageAC","Component","restProps","messagesElements","AddMessageFormRedux","reduxForm","form","dialogsElements","map","d","messages","chDialog","find","m","formData","newMessageBody"],"sourceRoot":""}